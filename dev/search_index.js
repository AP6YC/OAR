var documenterSearchIndex = {"docs":
[{"location":"examples/tutorials/iris/#iris","page":"Iris Dataset","title":"Iris Dataset","text":"","category":"section"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"(Image: Source code) (Image: notebook) (Image: compat) (Image: Author) (Image: Update time)","category":"page"},{"location":"examples/tutorials/iris/#Overview","page":"Iris Dataset","title":"Overview","text":"","category":"section"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"This example shows how the Iris dataset is loaded and used with existing Julia tools within the OAR project, which can be adapted for other Julia projects. Other scripts within this project utilize higher-level functions for loading, transforming, and splitting the data automatically, and this example shows how this is done at a low-level.","category":"page"},{"location":"examples/tutorials/iris/#Setup","page":"Iris Dataset","title":"Setup","text":"","category":"section"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"First, we load some dependencies:","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"# Multi-line using statements are permitted in Julia to gather all requirements and compile at once\nusing\n    OAR,                # This project\n    MLDatasets,         # Iris dataset\n    MLDataUtils         # Data utilities, splitting, etc.","category":"page"},{"location":"examples/tutorials/iris/#Loading-the-Dataset","page":"Iris Dataset","title":"Loading the Dataset","text":"","category":"section"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"We will download the Iris dataset for its small size and benchmark use for clustering algorithms.","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"iris = Iris()","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"Next, we manipulate the features and labels into a matrix of features and a vector of labels","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"features, labels = Matrix(iris.features)', vec(Matrix{String}(iris.targets))","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"Because the MLDatasets package gives us Iris labels as strings, we will use the MLDataUtils.convertlabel method with the MLLabelUtils.LabelEnc.Indices type to get a list of integers representing each class:","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"labels = convertlabel(LabelEnc.Indices{Int}, labels)\nunique(labels)","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"Next, we will create a train/test split with the MLDataUtils.stratifiedobs utility:","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"(X_train, y_train), (X_test, y_test) = stratifiedobs((features, labels))","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"We now have a train/test split of the features and targets for the Iris dataset. This project also defines some low-level data utilities for more easily passing around and transforming this data, so we often see this train/test split as a combined DataSplit struct:","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"data = OAR.DataSplit(X_train, X_test, y_train, y_test)","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"We can also turn this DataSplit into a vectored variant (where the features are arranged as a vector of samples rather than combined into a matrix like in the DataSplit):","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"data_vec = OAR.VectoredDataSplit(data)","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"","category":"page"},{"location":"examples/tutorials/iris/","page":"Iris Dataset","title":"Iris Dataset","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"man/languages/#languages","page":"Languages","title":"Languages","text":"","category":"section"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"This project has both Julia, Python, and Rust code, so files and experiments using each of these languages are listed separately.","category":"page"},{"location":"man/languages/#Julia","page":"Languages","title":"Julia","text":"","category":"section"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"The Julia (usage documentation here) component of this repository is implemented as a DrWatson project, so the repo structure and experiment usage generally follows the DrWatson philosophy with some minor changes:","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"Experiments are enumerated in their own folders under scripts.\nDatasets for experiments and the destination for subsequent results are under work.","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"This repo is also structured as its own project for common code under src/. As such, experiments being with the following preamble to initialize DrWatson and load the OAR libary code:","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"using DrWatson\n@quickactivate :OAR","category":"page"},{"location":"man/languages/#Testing","page":"Languages","title":"Testing","text":"","category":"section"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"Some unit tests are written to validate the library code used for experiments. Testing is done in the usual Julia workflow through the Julia REPL:","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"julia> ]\n(@v1.8) pkg> activate .\n(OAR) pkg> test","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"These unit tests are also automated through [GitHub workflows]https://docs.github.com/en/actions/using-workflows.","category":"page"},{"location":"man/languages/#Documentation","page":"Languages","title":"Documentation","text":"","category":"section"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"The Documenter.jl package is used to generate documentation with examples being generated with DemoCards.jl. This documentation is generated and hosted with [GitHub workflows]https://docs.github.com/en/actions/using-workflows for the project. To generate the documentation locally, change your terminal directory to the docs/ directory and run Julia with the following REPL commands:","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"julia> ]\n(@v1.8) pkg> activate .\n(docs) pkg> instantiate\n(docs) pkg> <BACKSPACE>\njulia> include(\"serve\".jl)","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"The line <BACKSPACE> means hitting the backspace key on your keyboard. This instantiates the documentation (downloading and precompiling dependencies), builds the documentation, and hosts it locally. If you wish to just build the docs, instead run include(\"make.jl\") (the serve.jl script simply runs the make script and runs a local live server for convenience).","category":"page"},{"location":"man/languages/#Python","page":"Languages","title":"Python","text":"","category":"section"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"Python experiments are currently in the form of IPython Jupyter notebooks under the notebooks/ folder. Pip requirements are listed in requirements.txt, and Python 3.11 is used.","category":"page"},{"location":"man/languages/#Rust","page":"Languages","title":"Rust","text":"","category":"section"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"The Rust component of the project is contained with its own oar/ folder. Until the Rust component becomes more sophisticated, its usage simply follows the usual compile-execute method with cargo:","category":"page"},{"location":"man/languages/","page":"Languages","title":"Languages","text":"cd oar\ncargo run","category":"page"},{"location":"man/contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This page serves as the contribution guide for the OAR package. From top to bottom, the ways of contributing are:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"GitHub Issues: how to raise an issue with the project.\nJulia Development: how to download and interact with the package.\nGitFlow: how to directly contribute code to the package in an organized way on GitHub.\nDevelopment Details: how the internals of the package are currently setup if you would like to directly contribute code.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Please also see the Attribution to learn about the authors and sources of support for the project.","category":"page"},{"location":"man/contributing/#Issues","page":"Contributing","title":"Issues","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The main point of contact is the GitHub issues page for the project. This is the easiest way to contribute to the project, as any issue you find or request you have will be addressed there by the authors of the package. Depending on the issue, the authors will collaborate with you, and after making changes they will link a pull request which addresses your concern or implements your proposed changes.","category":"page"},{"location":"man/contributing/#Julia-Development","page":"Contributing","title":"Julia Development","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"As a Julia package, development follows the usual procedure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Clone the project from GitHub\nSwitch to or create the branch that you wish work on (see GitFlow).\nStart Julia at your development folder.\nInstantiate the package (i.e., download and install the package dependencies).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For example, you can get the package and startup Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"git clone git@github.com:AP6YC/OAR.jl.git\njulia --project=.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nIn Julia, you must activate your project in the current REPL to point to the location/scope of installed packages. The above immediately activates the project when starting up Julia, but you may also separately startup the julia and activate the package with the interactive package manager via the ] syntax:julia\njulia> ]\n(@v1.8) pkg> activate .\n(OAR) pkg>","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"You may run the package's unit tests after the above setup in Julia with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> using Pkg\njulia> Pkg.instantiate()\njulia> Pkg.test()","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"or interactively though the Julia package manager with","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"julia> ]\n(OAR) pkg> instantiate\n(OAR) pkg> test","category":"page"},{"location":"man/contributing/#GitFlow","page":"Contributing","title":"GitFlow","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The OAR package follows the GitFlow git working model. The original post by Vincent Driessen outlines this methodology quite well, while Atlassian has a good tutorial as well. In summary:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"Create a feature branch off of the develop branch with the name feature/<my-feature-name>.\nCommit your changes and push to this feature branch.\nWhen you are satisfied with your changes, initiate a GitHub pull request (PR) to merge the feature branch with develop.\nIf the unit tests pass, the feature branch will first be merged with develop and then be deleted.\nReleases will be periodically initiated from the develop branch and versioned onto the master branch.\nImmediate bug fixes circumvent this process through a hotfix branch off of master.","category":"page"},{"location":"man/contributing/#Development-Details","page":"Contributing","title":"Development Details","text":"","category":"section"},{"location":"man/contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"These docs are currently hosted as a static site on the GitHub pages platform. They are setup to be built and served in a separate branch called gh-pages from the master/development branches of the project.","category":"page"},{"location":"man/contributing/#Package-Structure","page":"Contributing","title":"Package Structure","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"The OAR package has the following file structure:","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"OAR\n├── .github/workflows       // GitHub: workflows for testing and documentation.\n├── docs                    // Docs: documentation for the module.\n│   └───src                 //      Documentation source files.\n├── examples                // Source: example usage scripts.\n├── src                     // Source: majority of source code.\n│   ├───ART                 //      ART-based unsupervised modules.\n│   │   ├───distributed     //      Distributed ART modules.\n│   │   └───single          //      Undistributed ART modules.\n│   └───ARTMAP              //      ARTMAP-based supervised modules.\n├── test                    // Test: Unit, integration, and environment tests.\n│   ├── adaptiveresonance   //      Tests common to the entire package.\n│   ├── art                 //      Tests for just ART modules.\n│   ├── artmap              //      Tests for just ARTMAP modules.\n│   └───data                //      CI test data.\n├── .appveyor               // Appveyor: Windows-specific coverage.\n├── .gitattributes          // Git: LFS settings, languages, etc.\n├── .gitignore              // Git: .gitignore for the whole project.\n├── CODE_OF_CONDUCT.md      // Doc: the code of conduct for contributors.\n├── CONTRIBUTING.md         // Doc: contributing guide (points to this page).\n├── LICENSE                 // Doc: the license to the project.\n├── Project.toml            // Julia: the Pkg.jl dependencies of the project.\n└── README.md               // Doc: this document.","category":"page"},{"location":"man/contributing/#Type-Aliases","page":"Contributing","title":"Type Aliases","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"For convenience in when defining types and function signatures, this package uses the NumericalTypeAliases.jl package and the aliases therein. The documentation for the abstract and concrete types provided by NumericalTypeAliases.jl can be found here.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"In this package, data samples are always Real-valued, whereas class labels are integered. Furthermore, independent class labels are always Int because of the Julia native support for a given system's signed native integer type.","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This project does not currently test for the support of arbitrary precision arithmetic because learning algorithms in general do not have a significant need for precision.","category":"page"},{"location":"man/contributing/#Attribution","page":"Contributing","title":"Attribution","text":"","category":"section"},{"location":"man/contributing/#Authors","page":"Contributing","title":"Authors","text":"","category":"section"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"This package is developed and maintained by Sasha Petrenko with sponsorship by the Applied Computational Intelligence Laboratory (ACIL).","category":"page"},{"location":"man/contributing/","page":"Contributing","title":"Contributing","text":"If you simply have suggestions for improvement, Sasha Petrenko (<sap625@mst.edu>) is the current developer and maintainer of the OAR package, so please feel free to reach out with thoughts and questions.","category":"page"},{"location":"examples/experiments/simple_experiment/#simple_experiment","page":"Simple Experiment","title":"Simple Experiment","text":"","category":"section"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"(Image: Source code) (Image: notebook) (Image: compat) (Image: Author) (Image: Update time)","category":"page"},{"location":"examples/experiments/simple_experiment/#Overview","page":"Simple Experiment","title":"Overview","text":"","category":"section"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"This example shows how to run the Julia experiments in the OAR project. Experiments in the Julia component of the project are implemented as Julia scripts that load the OAR module as a source library and subsequently implement a particular experiment.","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"These experiments are enumerated under the scripts/ folder with a number and shorthand name for the experiment. READMEs populate this directory to provide context, explanation, and instructions for each experiment.","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"You may run one of these experiments by initiating a Julia REPL and \"including\" the script (which simply inserts the contents of the script directly into the session and runs it). This example points to the relative location of an experiment with respect to this example file, so you may need to adjust how you reference the experiment:","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"# Include/run an experiment that generates a random statement from a discretized Iris dataset grammar\ninclude(joinpath(\"..\", \"..\", \"..\", \"..\", \"scripts\", \"0_init\", \"ebnf.jl\"))","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"The above script very importantly includes the preamble","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"# using DrWatson\n# @quickactivate :OAR","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"which makes sure that the correct context is set up and that the OAR module containing experiment driver code is precompiled. This example will now reactivate the docs package because running the above example activates the top-level OAR package.","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"# Reactivate the documentation for future examples\nusing Pkg\nPkg.activate(joinpath(\"..\", \"..\", \"..\", \"..\", \"docs\"))","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"","category":"page"},{"location":"examples/experiments/simple_experiment/","page":"Simple Experiment","title":"Simple Experiment","text":"This page was generated using DemoCards.jl and Literate.jl.","category":"page"},{"location":"man/dev-index/#dev-main-index","page":"Dev Index","title":"Developer Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This page lists the types and functions that are internal to the OAR package. Because they are not part of the public API, these names might change relatively frequently between versions and so should not be relied upon.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"All internal names are listed in the Index, and each of these entries link to the docstrings in the Docs section.","category":"page"},{"location":"man/dev-index/#Index","page":"Dev Index","title":"Index","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"This section contains a list of internal names that link to their corresponding Documentation.","category":"page"},{"location":"man/dev-index/#dev-index-methods","page":"Dev Index","title":"Methods","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [OAR]\nOrder = [:function]","category":"page"},{"location":"man/dev-index/#dev-index-types","page":"Dev Index","title":"Types","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [OAR]\nOrder = [:type]","category":"page"},{"location":"man/dev-index/#dev-index-types-2","page":"Dev Index","title":"Constants","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Pages   = [\"dev-index.md\"]\nModules = [OAR]\nOrder = [:constant]","category":"page"},{"location":"man/dev-index/#dev-index-docs","page":"Dev Index","title":"Docs","text":"","category":"section"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Documentation for all internal names are listed below.","category":"page"},{"location":"man/dev-index/","page":"Dev Index","title":"Dev Index","text":"Modules = [OAR]\nPublic = false","category":"page"},{"location":"man/dev-index/#OAR.BNF","page":"Dev Index","title":"OAR.BNF","text":"struct BNF <: OAR.Grammar\n\nSummary\n\nBackus-Naur form of Grammar.\n\nConsists of a set of terminal symbols, non-terminal symbols, and production rules.\n\nFields\n\nN::Set{OAR.GSymbol}: Non-terminal symbols of the grammar.\n\nT::Set{OAR.GSymbol}: Terminal symbols of the grammar.\n\nS::Set{OAR.GSymbol}: Definition of a statement in this grammar.\n\nP::Dict{OAR.GSymbol, Set{OAR.GSymbol}}: The set of production rules of the grammar.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.BNF-Tuple{Set{OAR.GSymbol}}","page":"Dev Index","title":"OAR.BNF","text":"BNF(S::Set{OAR.GSymbol}) -> OAR.BNF\n\n\nSummary\n\nConstructor for a Backus-Naur Form grammer with an initial statement of non-terminal symbols.\n\nArguments\n\nN::STatement: an initial set of non-terminal grammar symbols.\n\nMethod List / Definition Locations\n\nBNF(S)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:106.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.BNF-Tuple{}","page":"Dev Index","title":"OAR.BNF","text":"BNF() -> OAR.BNF\n\n\nSummary\n\nDefault constructor for the Backus-Naur Form.\n\nMethod List / Definition Locations\n\nBNF()\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:119.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.DataSplit","page":"Dev Index","title":"OAR.DataSplit","text":"struct DataSplit\n\nSummary\n\nTrain/test split dataset.\n\nThis struct contains a standardized train/test split of real-valued vectors of samples arranged in a matrix and mapping to integered labels.\n\nFields\n\ntrain_x::Matrix{Float64}: The training data as a matrix of floating-point feature vectors: (n_features, n_samples).\n\ntest_x::Matrix{Float64}: The testing data as a matrix of floating-point feature vectors: (n_features, n_samples).\n\ntrain_y::Vector{Int64}: The training labels as a vector of integer labels: (n_samples,).\n\ntest_y::Vector{Int64}: The testing labels as a vector of integer labels: (n_samples,)\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.GramARTTerminal","page":"Dev Index","title":"OAR.GramARTTerminal","text":"GramARTTerminal\n\nDescription\n\nDefinition of Terminal symbols used throughtout GramART.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.Grammar","page":"Dev Index","title":"OAR.Grammar","text":"abstract type Grammar\n\nSummary\n\nAbstract type for formal grammars.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.SymbolCount","page":"Dev Index","title":"OAR.SymbolCount","text":"SymbolCount\n\nDescription\n\nThe structure of the counter for symbols in a ProtoNode.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.TerminalDist","page":"Dev Index","title":"OAR.TerminalDist","text":"TerminalDist\n\nDescription\n\nTerminal Distribution definition that is a dictionary mapping from Terminals to probabilities.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.VectoredDataSplit","page":"Dev Index","title":"OAR.VectoredDataSplit","text":"struct VectoredDataSplit{T, M}\n\nSummary\n\nVectored train/test split of arbitrary feature types.\n\nThis struct contains a standardized train/test split of vectors of vectored samples that map to labels.\n\nFields\n\ntrain_x::Array{Vector{T}, 1} where T: Training data as a vector of feature vectors of type T.\n\ntest_x::Array{Vector{T}, 1} where T: Testing data as a vector of feature vectors of type T.\n\ntrain_y::Vector: Training labels as a vector of type M.\n\ntest_y::Vector: Testing labels as a vector of type M.\n\n\n\n\n\n","category":"type"},{"location":"man/dev-index/#OAR.VectoredDataSplit-Tuple{OAR.DataSplit}","page":"Dev Index","title":"OAR.VectoredDataSplit","text":"Convenience constructor, turning a OAR.DataSplit into its vectored variant.\n\nArguments\n\ndata::DataSplit: the original OAR.DataSplit to transform into a vectored data ssplit.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, OAR.DataSplit}","page":"Dev Index","title":"Base.show","text":"show(io::IO, data::OAR.DataSplit)\n\n\nSummary\n\nOverload of the show function for OAR.DataSplit.\n\nArguments\n\nio::IO: the current IO stream.\ndata::DataSplit: the DataSplit to print/display.\n\nMethod List / Definition Locations\n\nshow(io, data)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/data_utils.jl:85.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#Base.show-Tuple{IO, OAR.VectoredDataSplit}","page":"Dev Index","title":"Base.show","text":"show(io::IO, data::OAR.VectoredDataSplit)\n\n\nSummary\n\nOverload of the show function for OAR.VectoredDataSplit.\n\nArguments\n\nio::IO: the current IO stream.\ndata::VectoredDataSplit: the OAR.VectoredDataSplit to print/display.\n\nMethod List / Definition Locations\n\nshow(io, data)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/data_utils.jl:103.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.DescretizedBNF-Tuple{Set{OAR.GSymbol}}","page":"Dev Index","title":"OAR.DescretizedBNF","text":"DescretizedBNF(S::Set{OAR.GSymbol}; bins) -> OAR.BNF\n\n\nSummary\n\nCreates a grammer for discretizing a set of symbols into a number of bins.\n\nArguments\n\nN::Statement: the set of non-terminal grammar symbols to use for binning.\nbins::Integer=10: optional, the granularity/number of bins.\n\nMethod List / Definition Locations\n\nDescretizedBNF(S; bins)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:147.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.iris_tt_real-Tuple{}","page":"Dev Index","title":"OAR.iris_tt_real","text":"iris_tt_real() -> OAR.DataSplit\n\n\nSummary\n\nLoads the Iris dataset and returns a OAR.DataSplit.\n\nMethod List / Definition Locations\n\niris_tt_real()\n\ndefined at /home/runner/work/OAR/OAR/src/lib/data_utils.jl:138.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.is_nonterminal-Tuple{OAR.Grammar, OAR.GSymbol}","page":"Dev Index","title":"OAR.is_nonterminal","text":"is_nonterminal(\n    grammar::OAR.Grammar,\n    symb::OAR.GSymbol\n) -> Any\n\n\nSummary\n\nChecks if a symbol is non-terminal in the grammar.\n\nMethod List / Definition Locations\n\nis_nonterminal(grammar, symb)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:205.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.is_terminal-Tuple{OAR.Grammar, OAR.GSymbol}","page":"Dev Index","title":"OAR.is_terminal","text":"is_terminal(grammar::OAR.Grammar, symb::OAR.GSymbol) -> Any\n\n\nSummary\n\nChecks if a symbol is terminal in the grammar.\n\nMethod List / Definition Locations\n\nis_terminal(grammar, symb)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:197.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.join_gsymbol-Tuple{OAR.GSymbol, Integer}","page":"Dev Index","title":"OAR.join_gsymbol","text":"join_gsymbol(symb::OAR.GSymbol, num::Integer) -> OAR.GSymbol\n\n\nSummary\n\nReturns a new GSymbol by adding a suffix.\n\nMethod List / Definition Locations\n\njoin_gsymbol(symb, num)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:130.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.parse_grammar-Tuple{OAR.Grammar, Set{OAR.GSymbol}}","page":"Dev Index","title":"OAR.parse_grammar","text":"parse_grammar(\n    grammar::OAR.Grammar,\n    statement::Set{OAR.GSymbol}\n)\n\n\nSummary\n\nParses and checks that a statement is permissible under a grammer.\n\nMethod List / Definition Locations\n\nparse_grammar(grammar, statement)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:182.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.random_produce-Tuple{OAR.Grammar, OAR.GSymbol}","page":"Dev Index","title":"OAR.random_produce","text":"random_produce(\n    grammar::OAR.Grammar,\n    symb::OAR.GSymbol\n) -> Any\n\n\nSummary\n\nProduces a random terminal from the non-terminal using the corresponding production rule.\n\nMethod List / Definition Locations\n\nrandom_produce(grammar, symb)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:189.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.random_statement-Tuple{OAR.Grammar}","page":"Dev Index","title":"OAR.random_statement","text":"random_statement(grammar::OAR.Grammar) -> Set{OAR.GSymbol}\n\n\nSummary\n\nGenerates a random statement from a grammar.\n\nMethod List / Definition Locations\n\nrandom_statement(grammar)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/BNF.jl:213.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.real_to_symb-Tuple{OAR.DataSplit, Vector{String}}","page":"Dev Index","title":"OAR.real_to_symb","text":"real_to_symb(\n    data::OAR.DataSplit,\n    labels::Vector{String};\n    bins\n) -> OAR.VectoredDataSplit{OAR.GSymbol, Int64}\n\n\nSummary\n\nTurns a OAR.DataSplit into a binned symbolic variant for use with GramART.\n\nArguments\n\ndata::DataSplit: the OAR.DataSplit to convert to symbols.\nlabels::Vector{String}: the labels corresponding to the non-terminal symbol names for the feature categories and their subsequent terminal variants.\nbins::Int=10: optional, the number of symbols to descretize the real-valued data to.\n\nMethod List / Definition Locations\n\nreal_to_symb(data, labels; bins)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/data_utils.jl:166.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.results_dir-Tuple","page":"Dev Index","title":"OAR.results_dir","text":"results_dir(args...) -> String\n\n\nSummary\n\nPoints to the results directory.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nresults_dir(args)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/drwatson.jl:40.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.symbolic_iris-Tuple{}","page":"Dev Index","title":"OAR.symbolic_iris","text":"symbolic_iris(\n;\n    bins\n) -> OAR.VectoredDataSplit{OAR.GSymbol, Int64}\n\n\nSummary\n\nQuickly generates a [OAR.VectoredDataSplit] of the symbolic Iris dataset.\n\nArguments\n\nbins::Int=10: optional, the number of symbols to descretize the real-valued data to.\n\nMethod List / Definition Locations\n\nsymbolic_iris(; bins)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/data_utils.jl:249.\n\n\n\n\n\n","category":"method"},{"location":"man/dev-index/#OAR.work_dir-Tuple","page":"Dev Index","title":"OAR.work_dir","text":"work_dir(args...) -> String\n\n\nSummary\n\nPoints to the work directory containing raw datasets, processed datasets, and results.\n\nArguments\n\nargs...: the string directories to append to the directory.\n\nMethod List / Definition Locations\n\nwork_dir(args)\n\ndefined at /home/runner/work/OAR/OAR/src/lib/drwatson.jl:29.\n\n\n\n\n\n","category":"method"},{"location":"man/full-index/#main-index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This page lists the core methods and types of the Julia component of the OAR project.","category":"page"},{"location":"man/full-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section enumerates the names exported by the package, each of which links to its corresponding Documentation.","category":"page"},{"location":"man/full-index/#index-modules","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [OAR]\nOrder = [:module]","category":"page"},{"location":"man/full-index/#index-methods","page":"Index","title":"Methods","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [OAR]\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [OAR]\nOrder = [:type]","category":"page"},{"location":"man/full-index/#index-constants","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Pages   = [\"full-index.md\"]\nModules = [OAR]\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#index-docs","page":"Index","title":"Docs","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"This section lists the documentation for every exported name of the OAR package.","category":"page"},{"location":"man/full-index/#index-modules-docs","page":"Index","title":"Modules","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [OAR]\nPrivate = false\nOrder = [:module]","category":"page"},{"location":"man/full-index/#OAR.OAR","page":"Index","title":"OAR.OAR","text":"A module encapsulating the experimental driver code for the OAR project.\n\nImports\n\nThe following names are imported by the package as dependencies:\n\nAdaptiveResonance\nBase\nCore\nDocStringExtensions\nDrWatson\nMLDataUtils\nMLDatasets\nNumericalTypeAliases\nPkg\nReexport\n\nExports\n\nThe following names are exported and available when using the package:\n\nOAR_VERSION\nProtoNode\nTreeNode\n\n\n\n\n\n","category":"module"},{"location":"man/full-index/#index-functions-docs","page":"Index","title":"Functions","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [OAR]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"man/full-index/#index-types-docs","page":"Index","title":"Types","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [OAR]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"man/full-index/#OAR.ProtoNode","page":"Index","title":"OAR.ProtoNode","text":"mutable struct ProtoNode <: OAR.ARTNode\n\nSummary\n\nProtoNode struct, used to generate tree prototypes, which are the templates of GramART.\n\nFields\n\ndist::Dict{String, Float64}: The distribution over all symbols at this node.\n\nN::Vector{Int64}: The update counters for each symbol.\n\nchildren::Vector{ProtoNode}: The children on this node.\n\n\n\n\n\n","category":"type"},{"location":"man/full-index/#OAR.TreeNode","page":"Index","title":"OAR.TreeNode","text":"mutable struct TreeNode <: OAR.ARTNode\n\nSummary\n\nTree node for a GramART module.\n\nFields\n\nt::String: The terminal symbol for the node.\n\nchildren::Vector{TreeNode}: Children nodes of this node.\n\n\n\n\n\n","category":"type"},{"location":"man/full-index/#index-constants-docs","page":"Index","title":"Constants","text":"","category":"section"},{"location":"man/full-index/","page":"Index","title":"Index","text":"Modules = [OAR]\nPrivate = false\nOrder = [:constant]","category":"page"},{"location":"man/full-index/#OAR.OAR_VERSION","page":"Index","title":"OAR.OAR_VERSION","text":"OAR_VERSION\n\nDescription\n\nA constant that contains the version of the installed OAR package.\n\nThis value is computed at compile time, so it may be used to programmatically verify the version of OAR that is installed in case a compat entry in your Project.toml is missing or otherwise incorrect.\n\n\n\n\n\n","category":"constant"},{"location":"man/guide/#Package-Guide","page":"Guide","title":"Package Guide","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"To work with the OAR project, you should know:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"How to install the package","category":"page"},{"location":"man/guide/#installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Because it is an experimental research repository, the OAR package is not registered on JuliaHub. To set Julia component the project up, you must:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"Download a Julia distribution and install it on your system\nGit clone this repository or download a zip.\nRun julia within the top of the OAR directory, and run the following commands to instantiate the package:","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"julia> ]\n(@v1.8) pkg> activate .\n(OAR) pkg> instantiate","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"This will download all of the dependencies of the project and precompile where possible.","category":"page"},{"location":"man/guide/","page":"Guide","title":"Guide","text":"note: Note\nThis project is still under development, so detailed usage guides beyond installation have not yet been written about the package's functionality. Please see the other sections of this documentation for examples, definition indices, and more.","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"This section contains some examples using the OAR package with topics ranging from how to the internals of package work to practical examples on different datasets.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples are separated into the following sections:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Tutorials: basic Julia examples that also include how low-level routines work in this package.\nExperiments: how to run experiments in the package.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/#Tutorials","page":"Examples","title":"Tutorials","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples demonstrate some low-level usage of the Julia programming language and subroutines of the OAR project itself.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"grid-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"card grid-card\">\n<div class=\"grid-card-cover\">\n<div class=\"grid-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This demo provides a quick example of how to load the Iris dataset with existing Julia tools.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n<div class=\"grid-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Iris Dataset","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/#Experiments","page":"Examples","title":"Experiments","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples show how to run experiments in the OAR project.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"grid-card-section\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"<div class=\"card grid-card\">\n<div class=\"grid-card-cover\">\n<div class=\"grid-card-description\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This demo shows how to run a simple experiment in the OAR project.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: card-cover-image)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n<div class=\"grid-card-text\">","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Simple Experiment","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>\n</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"</div>","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"examples/#examples-attribution","page":"Examples","title":"Attribution","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Icons used for the covers of these demo cards are attributed to the following sites:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Lab icons created by Prosymbols - Flaticon (experiment_748518)\nIris icons created by Freepik - Flaticon (iris_4139395)","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using OAR, Dates\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"assets/logo.png\" width=\"300\">","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"These pages serve as the official documentation for the OAR (Ontologies with Adaptive Resonance) project.","category":"page"},{"location":"#Manual-Outline","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is split into the following sections:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"man/guide.md\",\n    \"../examples/index.md\",\n    \"man/languages.md\",\n    \"man/contributing.md\",\n    \"man/full-index.md\",\n    \"man/dev-index.md\",\n]\nDepth = 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Package Guide provides a tutorial to the full usage of the package, while Examples gives sample workflows with the various experiments of the project.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Because there are components to this project implemented in other programming languages, the Languages section outlines various other usages in the project outside of the Julia components and structure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Contributing section outlines how to contribute to the project. The Index enumerates all public types, functions, and other components with docstrings, whereas internals are listed in the Developer's Index.","category":"page"},{"location":"#About-These-Docs","page":"Home","title":"About These Docs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Though several different programming languages are used throughout the project, these docs are built around the Julia component of the project using the Documenter.jl package.","category":"page"},{"location":"#Documentation-Build","page":"Home","title":"Documentation Build","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation was built using Documenter.jl with the following version and OS:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using OAR, Dates # hide\nprintln(\"OAR v$(OAR_VERSION) docs built $(Dates.now()) with Julia $(VERSION) on $(Sys.KERNEL)\") # hide","category":"page"}]
}
